diff --git a/src/analyzer/protocol/conn-size/ConnSize.cc b/src/analyzer/protocol/conn-size/ConnSize.cc
index 183ee1e..cdee22e 100644
--- a/src/analyzer/protocol/conn-size/ConnSize.cc
+++ b/src/analyzer/protocol/conn-size/ConnSize.cc
@@ -34,6 +34,10 @@ void ConnSize_Analyzer::Init()
 	orig_pkts_thresh = 0;
 	resp_bytes_thresh = 0;
 	resp_pkts_thresh = 0;
+
+	thresh = 0;
+	thresh_kind = 0;
+	num_bytes = 0;
 	}
 
 void ConnSize_Analyzer::Done()
@@ -85,10 +89,35 @@ void ConnSize_Analyzer::CheckSizes(bool is_orig)
 		}
 	}
 
+
+void ConnSize_Analyzer::CheckSize(double st)
+	{
+	if ( thresh_kind != 0 && thresh < st && network_time - start_time >= st )
+		{
+		thresh = st;
+		printf("%.6f %s timing %.6f %llu %llu %.6f %.6f\n", network_time, Conn()->GetUID().Base62().c_str(), st, num_bytes, resp_bytes, network_time - start_time, network_time - Conn()->StartTime());
+		}
+	}
+
+
 void ConnSize_Analyzer::DeliverPacket(int len, const u_char* data, bool is_orig, uint64 seq, const IP_Hdr* ip, int caplen)
 	{
 	Analyzer::DeliverPacket(len, data, is_orig, seq, ip, caplen);
 
+	if ( ! is_orig ) {
+			CheckSize(0.008512);
+			CheckSize(0.011470);
+			CheckSize(0.041560);
+			CheckSize(0.08270);
+			CheckSize(0.089430);
+			CheckSize(0.09307);
+			CheckSize(0.1);
+			CheckSize(0.2);
+
+		if ( thresh_kind != 0 )
+			num_bytes += ip->PayloadLen() - 20; // 20 = minimum tcp header size
+	}
+
 	if ( is_orig )
 		{
 		orig_bytes += ip->TotalLen();
@@ -181,3 +210,13 @@ void ConnSize_Analyzer::FlipRoles()
 	resp_pkts = tmp;
 	}
 
+void ConnSize_Analyzer::EnableTiming()
+	{
+	if ( thresh_kind != 0 )
+		return;
+	printf("%.6f %s request %llu %.6f \n", network_time, Conn()->GetUID().Base62().c_str(), resp_bytes, network_time - Conn()->StartTime());
+
+	thresh_kind = 1;
+	start_time = network_time;
+	}
+
diff --git a/src/analyzer/protocol/conn-size/ConnSize.h b/src/analyzer/protocol/conn-size/ConnSize.h
index d8dff57..e065eb4 100644
--- a/src/analyzer/protocol/conn-size/ConnSize.h
+++ b/src/analyzer/protocol/conn-size/ConnSize.h
@@ -21,6 +21,8 @@ public:
 	virtual void UpdateConnVal(RecordVal *conn_val);
 	virtual void FlipRoles();
 
+	void EnableTiming();
+
 	void SetThreshold(uint64_t threshold, bool bytes, bool orig);
 	uint64 GetThreshold(bool bytes, bool orig);
 
@@ -31,6 +33,7 @@ protected:
 	virtual void DeliverPacket(int len, const u_char* data, bool is_orig,
 					uint64 seq, const IP_Hdr* ip, int caplen);
 	void CheckSizes(bool is_orig);
+	void CheckSize(double st);
 
 	void ThresholdEvent(EventHandlerPtr f, uint64 threshold, bool is_orig);
 
@@ -39,6 +42,11 @@ protected:
 	uint64_t orig_pkts;
 	uint64_t resp_pkts;
 
+	uint64_t num_bytes;
+	double thresh;
+	unsigned int thresh_kind;
+	double start_time;
+
 	uint64_t orig_bytes_thresh;
 	uint64_t resp_bytes_thresh;
 	uint64_t orig_pkts_thresh;
diff --git a/src/analyzer/protocol/http/HTTP.cc b/src/analyzer/protocol/http/HTTP.cc
index f60d137..e4aac54 100644
--- a/src/analyzer/protocol/http/HTTP.cc
+++ b/src/analyzer/protocol/http/HTTP.cc
@@ -12,6 +12,7 @@
 #include "HTTP.h"
 #include "Event.h"
 #include "analyzer/protocol/mime/MIME.h"
+#include "analyzer/protocol/conn-size/ConnSize.h"
 #include "file_analysis/Manager.h"
 
 #include "events.bif.h"
@@ -1372,6 +1373,11 @@ void HTTP_Analyzer::HTTP_Request()
 		vl->append(new StringVal(fmt("%.1f", request_version)));
 		// DEBUG_MSG("%.6f http_request\n", network_time);
 		ConnectionEvent(http_request, vl);
+		//printf("%.6f %s request \n", network_time, Conn()->GetUID().Base62().c_str());
+		analyzer::Analyzer* csa = Conn()->FindAnalyzer("CONNSIZE");
+		if ( ! csa )
+			printf("No connsize analyzer?");
+		static_cast<analyzer::conn_size::ConnSize_Analyzer*>(csa)->EnableTiming();
 		}
 	}
 
diff --git a/src/analyzer/protocol/tcp/TCP.cc b/src/analyzer/protocol/tcp/TCP.cc
index 72cad8a..c5f5dd0 100644
--- a/src/analyzer/protocol/tcp/TCP.cc
+++ b/src/analyzer/protocol/tcp/TCP.cc
@@ -1777,7 +1777,10 @@ void TCP_Analyzer::ConnectionFinished(int half_finished)
 	if ( half_finished )
 		Event(connection_half_finished);
 	else
+		{
+		printf("%.6f %s finished \n", network_time, Conn()->GetUID().Base62().c_str());
 		Event(connection_finished);
+		}
 
 	is_active = 0;
 	}
